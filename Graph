#include<stdio.h>
#include<stdlib.h>
struct node
{
	int vertex;
	struct node *link;
};

void display(struct node *a[],int n)
{
	int i;
	struct node *p;
	for(i=0;i<n;i++)
	{
		printf("\n%d",i+1);
		p=a[i];
		while(p != NULL)
		{
			printf("->%d",p->vertex);
			p = p->link;
		}
	}
}	

void read_graph(struct node *a[],int n)
{
	int i,j,v1,e,t,k;
	struct node *p;
	
	
	for(i=0;i<n;i++)
	{
		printf("Enter node %d : ",i+1);
		scanf("%d",&v1);
		printf("Enter number of adjacent nodes of %d : ",v1);
		scanf("%d",&t);
		printf("Enter adjacents of %d : ",v1);
		if(t!=0){
		while(t--)
		{
			scanf("%d",&e);
			
			struct node *newptr=(struct node*)malloc(sizeof(struct node));
			newptr->vertex=e;
			newptr->link=NULL;
			if(a[i]==NULL)
				a[i]=newptr;
			else
			{
				p=a[i];
				while(p->link != NULL)
					p = p->link;
				p->link=newptr;
			}
		}
		}	
	}
		
	
	
}

void dir_graph()
{
	int i,j,in_degree=0,out_degree=0,v;
	struct node *a[20],*p;
	printf("Enter number of vertices : ");
	scanf("%d",&v);
	for(i=0;i<v;i++)
		a[i]=NULL;
	
	read_graph(a,v);
	printf("Adjacency list is :\n");
	
	display(a,v);		
	printf("\n\nVertex\t\tIn Degree\t\tOut Degree\t\tTotal Degree\n");
	for(i=0;i<v;i++)
	{
		in_degree=0,out_degree=0;
		p=a[i];
		while(p != NULL)
		{
			out_degree++;
			p = p->link;
		}
		for(j=0;j<v;j++)
		{
			p=a[j];
			while(p != NULL)
			{
				if(p->vertex==i+1)
					in_degree++;
				p = p->link;
			}
		}
		
		
		
		printf("\n%d\t\t%d\t\t\t%d\t\t\t%d\n",i+1,in_degree,out_degree,in_degree+out_degree);
	}
}

void un_graph()
{
	int i,j,degree=0,v;
	struct node *a[20],*p;
	printf("Enter number of vertices : ");
	scanf("%d",&v);
	for(i=0;i<v;i++)
		a[i]=NULL;
	
	read_graph(a,v);
	printf("Adjacency list is :\n");
	display(a,v);		
			
	printf("\n\nVertex\t\tDegree\n");
	for(i=0;i<v;i++)
	{
		degree=0;
		
		p=a[i];
		while(p != NULL)
		{
			degree++;
			p = p->link;
		}
		
		printf("\n%d\t\t%d\n",i+1,degree);
	}
}
	
	

void main()
{
	int ch;
	while(1)
	{
		printf("\n\n1.Directed Graph\n2.Undirected Graph\n3.Exit\n");
		printf("Enter your choice");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1 : dir_graph();
				 break;
			case 2 : un_graph();
				 break;
			case 3 : exit(0);
			default: printf("Invalid input");
		}
	}
}
